openapi: 3.0.3
info:
  title: WASAPhoto API
  description: "Web and Software Architecture Exam Project"
  version: "1.0.0"

servers:
  - url: /v1 

tags:
 - name: "login"
 - name: "user"
 - name: "photo"

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

paths:
  /v1/session:
    post:
      tags:
        - "login"
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"

  /v1/users/{userId}/set-username:
    put:
      summary: Set user's username
      operationId: setMyUserName
      tags:
        - "user"
      parameters:
        - name: userId
          in: path
          description: The ID of the user
          required: true
          schema:
            type: string
      requestBody:
        description: User details for updating username
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newUsername:
                  type: string
                  example: "new_username"
      responses:
        '200':
          description: User username updated successfully
          content:
            application/json:
              example: {"message": "Username updated successfully"}
        '400':
          description: Bad request
          content:
            application/json:
              example: {"error": "Bad request"}

  /v1/photos/upload:
    post:
      summary: Upload a photo
      operationId: uploadPhoto
      tags:
        - "photo"
      requestBody:
        description: Photo details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "abcdef012345"
                photoData:
                  type: string
                  example: "base64encodedimagedata"
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoId:
                    type: string
                    example: "photo123"
                  likesCount:
                    type: integer
                    example: 0
        '400':
           description: Bad request
           content:
             application/json:
               example: {"error": "Bad request"}

  /v1/users/{userId}/follow:
    post:
      summary: Follow a user
      operationId: followUser
      tags:
        - "user"
      parameters:
        - name: userId
          in: path
          description: The ID of the user to follow
          required: true
          schema:
            type: string
      responses:
        '201':
          description: User followed successfully
          content:
            application/json:
              example: {"message": "User followed successfully"}
        '400':
          description: Bad request
          content:
            application/json:
              example: {"error": "Bad request"}

  /v1/users/{userId}/unfollow:
    post:
      summary: Unfollow a user
      operationId: unfollowUser
      tags:
        - "user"
      parameters:
        - name: userId
          in: path
          description: The ID of the user to unfollow
          required: true
          schema:
            type: string
      responses:
        '201':
          description: User unfollowed successfully
          content:
            application/json:
              example: {"message": "User unfollowed successfully"}
        '400':
          description: Bad request
          content:
            application/json:
              example: {"error": "Bad request"}

  /v1/users/{userId}/ban:
    post:
      summary: Ban a user
      operationId: banUser
      tags:
        - "user"
      parameters:
        - name: userId
          in: path
          description: The ID of the user to ban
          required: true
          schema:
            type: string
      responses:
        '201':
          description: User banned successfully
          content:
            application/json:
              example: {"message": "User banned successfully"}
        '400':
          description: Bad request
          content:
            application/json:
              example: {"error": "Bad request"}

  /v1/users/{userId}/unban:
    post:
      summary: Unban a user
      operationId: unbanUser
      tags:
        - "user"
      parameters:
        - name: userId
          in: path
          description: The ID of the user to unban
          required: true
          schema:
            type: string
      responses:
        '201':
          description: User unbanned successfully
          content:
            application/json:
              example: {"message": "User unbanned successfully"}
        '400':
          description: Bad request
          content:
            application/json:
              example: {"error": "Bad request"}

  /v1/users/{userId}/profile:
    get:
      summary: Get user profile
      operationId: getUserProfile
      tags:
        - "user"
      parameters:
        - name: userId
          in: path
          description: The ID of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: "abcdef012345"
                  likedPhotos:
                    type: array
                    items:
                      type: object
                      properties:
                        photoId:
                          type: string
                          example: "photo123"
                        likesCount:
                          type: integer
                          example: 0
                        comments:
                          type: array
                          items:
                            type: object
                            properties:
                              commentId:
                                type: string
                                example: "comment456"
                              userId:
                                type: string
                                example: "abcdef012345"
                              comment:
                                type: string
                                example: "Great photo!"
        '404':
          description: User not found
          content:
            application/json:
              example: 
                userId: "abcdef012345"
                likedPhotos: 
                  - photoId: "photo123"
                    likesCount: 0
                    comments: []

  /v1/users/{userId}/stream:
    get:
      summary: Get user's photo stream
      operationId: getMyStream
      tags:
        - "photo"
      parameters:
        - name: userId
          in: path
          description: The ID of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User stream retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    photoId:
                      type: string
                      example: "photo123"
                    likesCount:
                      type: integer
                      example: 0
                    comments:
                      type: array
                      items:
                        type: object
                        properties:
                          commentId:
                            type: string
                            example: "comment456"
                          userId:
                            type: string
                            example: "abcdef012345"
                          comment:
                            type: string
                            example: "Great photo!"
        '404':
          description: User not found
          content:
            application/json:
              example: {"error": "User not found"}

  /v1/photos/{photoId}/like:
    post:
      summary: Like a photo
      operationId: likePhoto
      tags:
        - "photo"
      parameters:
        - name: photoId
          in: path
          description: The ID of the photo to like
          required: true
          schema:
            type: string
      requestBody:
        description: Like details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "abcdef012345"
      responses:
        '201':
          description: Photo liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  likesCount:
                    type: integer
                    example: 1
              examples:
                application/json:
                  value: {"likesCount": 1}
        '400':
          description: Bad request
          content:
            application/json:
              example: {"error": "Bad request"}

  /v1/photos/{photoId}/unlike:
    post:
      summary: Unlike a photo
      operationId: unlikePhoto
      tags:
        - "photo"
      parameters:
        - name: photoId
          in: path
          description: The ID of the photo to unlike
          required: true
          schema:
            type: string
      requestBody:
        description: Like details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "abcdef012345"
      responses:
        '201':
          description: Photo unliked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  likesCount:
                    type: integer
                    example: 0
              examples:
                application/json:
                  value: {"likesCount": 0}
        '400':
          description: Bad request
          content:
            application/json:
              example: {"error": "Bad request"}

  /v1/photos/{photoId}/comment:
    post:
      summary: Comment on a photo
      operationId: commentPhoto
      tags:
        - "photo"
      parameters:
        - name: photoId
          in: path
          description: The ID of the photo to comment on
          required: true
          schema:
            type: string
      requestBody:
        description: Comment details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "abcdef012345"
                comment:
                  type: string
                  example: "Great photo!"
            examples:
              application/json:
                value: {"userId": "abcdef012345", "comment": "Great photo!"}
      responses:
        '201':
          description: Photo commented successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  commentId:
                    type: string
                    example: "comment456"
                  userId:
                    type: string
                    example: "abcdef012345"
                  comment:
                    type: string
                    example: "Great photo!"
              examples:
                application/json:
                  value: {"commentId": "comment456", "userId": "abcdef012345", "comment": "Great photo!"}
        '400':
          description: Bad request
          content:
            application/json:
              example: {"error": "Bad request"}

  /v1/photos/{photoId}/uncomment:
    delete:
      summary: Remove a comment from a photo
      operationId: uncommentPhoto
      tags:
        - "photo"
      parameters:
        - name: photoId
          in: path
          description: The ID of the photo to remove a comment from
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Comment removed successfully
          content:
            application/json:
              example: {"message": "Comment removed successfully"}
        '400':
           description: Bad request
           content:
             application/json:
               example: {"error": "Bad request"}

  /v1/photos/{photoId}/delete:
    delete:
      summary: Delete a photo
      operationId: deletePhoto
      tags:
        - "photo"
      parameters:
        - name: photoId
          in: path
          description: The ID of the photo to delete
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Photo deleted successfully
          content:
            application/json:
              examples:
                application/json:
                  value: {"message": "Photo deleted successfully"}
        '400':
           description: Bad request
           content:
             application/json:
               examples:
                 application/json:
                   value: {"error": "Bad request"}
